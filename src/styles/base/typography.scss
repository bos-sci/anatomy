@import "./../abstracts/variables";

//
// base font families
//

h1, h2, h3, h4, h5, h6,
.display-1, .display-2, .display-3, .display-4, .display-5, .display-6, .display-7
{
  font-family: $font-family-base-bold;
}

p
{
  font-family: $font-family-base;
}

//
// Headings
//

// %heading {
//   font-family: $headings-font-family;
//   font-style: $headings-font-style;
//   font-weight: $headings-font-weight;
//   line-height: $headings-line-height;
//   color: $headings-color;
// }

// h1
// {
//   @extend %heading;
//   @include font-size($h1-font-size);
// }

// h2
// {
//   @extend %heading;
//   @include font-size($h2-font-size);
// }

// h3
// {
//   @extend %heading;
//   @include font-size($h3-font-size);
// }

// h4
// {
//   @extend %heading;
//   @include font-size($h4-font-size);
// }

// h5
// {
//   @extend %heading;
//   @include font-size($h5-font-size);
// }

// h6
// {
//   @extend %heading;
//   @include font-size($h6-font-size);
// }

// .h1
// {
//   @extend h1;
// }

// .h2
// {
//   @extend h2;
// }

// .h3
// {
//   @extend h3;
// }

// .h4
// {
//   @extend h4;
// }

// .h5
// {
//   @extend h5;
// }

// .h6
// {
//   @extend h6;
// }

//
// display classes
//

// @each $display, $font-size in $display-font-sizes
// {
//   .display-#{$display}
//   {
//     @include font-size($font-size);
//     font-weight: $display-font-weight;
//     line-height: $display-line-height;
//   }
// }







/* 
  targetHeight = ceil(fontSize / 4) * 4; -- finds the closest multiple of 4 to the computed font size
  lineHeight = targetHeight / fontSize -- finds what multiple of the font size to use to get that value

  so you can use calc to convert em to px which happens in css (not scss) realtime because em are relative units.
  since this happens realtime you can't use that calc value in a scss expression i.e. round, so unless theres a way to round with css I don't think its possible

  be careful with the values you pick for the base rem etc to ensure the heading font sizes are all multiples of 4
*/

//
// modular type scale and vertical rhythm
//

:root
{
  --fs-base: 16; // default font size, 16px / 1rem
  --lh-base: 1.5;
  --ms-ratio: 1.16;

  @media (min-width: 768px)
  {
    --fs-base: 18;
    --ms-ratio: 1.18;
  }
}

// fs-base * (ms-ratio ^ ms-step);

// $fs-base: var(--fs-base); // type scale base font size // body, h6, display-8
// $ms-ratio: var(--ms-ratio); // modular scale ratio

// $fs-sm: calc($fs-base / $ms-ratio); // text-size-sm
$fs-1: calc(var(--fs-base) * var(--ms-ratio)); // h5, text-size-lg, display-7
// $fs-2: calc($fs-1 * $ms-ratio); // h4, display-6
// $fs-3: calc($fs-2 * $ms-ratio); // h3, display-5
// $fs-4: calc($fs-3 * $ms-ratio); // h2, display-4
// $fs-5: calc($fs-4 * $ms-ratio); // h1, display-3
// $fs-6: calc($fs-5 * $ms-ratio); // display-2
// $fs-7: calc($fs-6 * $ms-ratio); // display-1

//
// font size and rounded line height based on px font size and line height
//
// NOTES:
// mixin is expecting px font size -- can we change this to ratio-based scale step?
// mixin is expecting px value for line height -- can we change this to unitless? unitless-line-height = $font-size-px / $line-height-px
// multiples of 4: 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100
//

$doc-font-size-px: 16;
$doc-line-height-px: 24; // default line height, 24px / 1.5
$rounded-line-height: round($doc-line-height-px / 4) * 4;

// @mixin font-size($font-size-px: var(--fs-base), $line-height-px: var(--lh-base))
// {
//   font-size: 0px + $font-size-px;
//   font-size: 0rem + $font-size-px / $doc-font-size-px;

//   $rounded-line-height: round($line-height-px / 4) * 4; // round(x / to) * to;

//   @if $line-height-px
//   {
//     line-height: ceil($font-size-px / $rounded-line-height) * ($rounded-line-height / $font-size-px);
//   }
// }

@mixin font-size($font-size-px)
{
  font-size: 0px + $font-size-px;
  font-size: 0rem + $font-size-px / $doc-font-size-px;
}

@mixin line-height($line-height-px)
{
  $rounded-line-height: round($line-height-px / 4) * 4; // round(x / to) * to;

  @if $line-height-px
  {
    line-height: ceil($font-size-px / $rounded-line-height) * ($rounded-line-height / $font-size-px);
  }
}

/* mobile-first defaults */
.display-1
{
  // @include font-size(45.22, 54.264);
  @include font-size($fs-1);
  line-height: ceil($fs-1 / $rounded-line-height) * ($rounded-line-height / $font-size-px);
}

.display-2
{
  // @include font-size(38.98, 46.776);
  @include font-size(38.98);
  @include line-height(46.776);
}

h1,
.display-3
{
  margin-top: 3.5rem;
  margin-bottom: 0;
  @include font-size(33.61, 40.332);
}

h2,
.display-4
{
  margin-top: 3rem;
  margin-bottom: 0;
  @include font-size(28.97, 34.764);
}

h3,
.display-5
{
  margin-top: 2.5rem;
  margin-bottom: 0;
  @include font-size(24.97, 29.964);
}

h4,
.display-6
{
  margin-top: 2rem;
  margin-bottom: 0;
  @include font-size(21.53, 25.836); // 1.2
}

h5,
.display-7,
.text-size-lg
{
  margin-top: 1.75rem;
  margin-bottom: 0;
  @include font-size(18.56, 27.84); // 1.5
}

h6,
.display-8,
p
{
  margin-top: 1rem;
  margin-bottom: 0;
  @include font-size(16, 24);
}

ul, ol
{
  margin-top: 1rem;
  margin-bottom: 0;

  &:first-child
  {
    margin-top: 0;
  }
}

li
{
  @include font-size(16, 24);
}

.text-size-sm
{
  margin-top: 1rem;
  margin-bottom: 0;
  @include font-size(13.79, 20.685);
}

.text-size-xs
{
  margin-top: 1rem;
  margin-bottom: 0;
  @include font-size(12, 18);
}

/* medium, large, extra-large */
@media (min-width: 768px)
{
  .display-1
  {
    @include font-size(57.34, 68.808);
  }

  .display-2
  {
    @include font-size(48.59, 58.308);
  }

  h1,
  .display-3
  {
    @include font-size(41.18, 49.416);
  }

  h2,
  .display-4
  {
    @include font-size(34.9, 41.88);
  }

  h3,
  .display-5
  {
    @include font-size(29.57, 35.484);
  }

  h4,
  .display-6
  {
    @include font-size(25.06, 30.072);
  }

  h5,
  .display-7,
  .text-size-lg
  {
    @include font-size(21.24, 31.86); // 1.5
  }

  h6,
  .display-8,
  p,
  li
  {
    @include font-size(18, 27);
  }

  .text-size-sm
  {
    @include font-size(15.25, 22.875);
  }

  .text-size-xs
  {
    @include font-size(12, 18);
  }
}
















// TODO: explore 
// px/em/rem
// scss for 4px baseline vertical rhythm / line height
// locks for smallest/largest / viewport-relative scale vs ratio-based scale / a la bootstrap 5
// figure out font awesome

// body
// {
//   --fs-base: 1rem;
//   --fs-ratio: 1.13;

//   --fs-sm: calc(1em / var(--fs-ratio));
//   --fs-1: calc(1em * var(--fs-ratio));
//   --fs-2: calc(1em * var(--fs-ratio) * var(--fs-ratio));
//   --fs-3: calc(1em * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio));
//   --fs-4: calc(1em * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio));
//   --fs-5: calc(1em * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio));
//   --fs-6: calc(1em * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio));
//   --fs-7: calc(1em * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio));
//   --fs-8: calc(1em * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio));
//   --fs-9: calc(1em * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio) * var(--fs-ratio));

//   --base-line-height: 1.5;
//   --base-spacing-unit: .5rem;

//   color: var(--black);
//   font-size: var(--fs-base);
//   line-height: var(--base-line-height);
// }

// h1, h2, h3, h4, h5, h6,
// .display-1, .display-2, .display-3, .display-4, .display-5, .display-6, .display-7, .display-8, .display-9
// {
//   font-family: $font-family-heading;
// }

// p,
// .text-size-lg,
// .text-size-sm,
// .text-size-xs
// {
//   font-family: $font-family-base;
// }

// li
// {
//   margin-top: 0.5rem;
// }

// /* mobile-first defaults */
// .display-1
// {
//   margin-top: calc(var(--base-spacing-unit) * 5);
//   margin-bottom: calc(var(--base-spacing-unit) * 2);
//   font-family: $font-family-heading;
//   font-size: var(--fs-9);
//   line-height: 1.4;
// }

// .display-2
// {
//   margin-top: calc(var(--base-spacing-unit) * 5);
//   margin-bottom: calc(var(--base-spacing-unit) * 2);
//   font-family: $font-family-heading;
//   font-size: var(--fs-8);
//   line-height: 1.4;
// }

// .display-3
// {
//   margin-top: calc(var(--base-spacing-unit) * 5);
//   margin-bottom: calc(var(--base-spacing-unit) * 2);
//   font-family: $font-family-heading;
//   font-size: var(--fs-7);
//   line-height: 1.4;
// }

// h1,
// .display-4
// {
//   margin-top: calc(var(--base-spacing-unit) * 5);
//   margin-bottom: calc(var(--base-spacing-unit) * 2);
//   font-family: $font-family-heading;
//   font-size: var(--fs-6);
//   line-height: 1.4;
// }

// h2,
// .display-5
// {
//   margin-top: calc(var(--base-spacing-unit) * 5);
//   margin-bottom: calc(var(--base-spacing-unit) * 2);
//   font-family: $font-family-heading;
//   font-size: var(--fs-5);
//   line-height: 1.4;
// }

// h3,
// .display-6
// {
//   margin-top: calc(var(--base-spacing-unit) * 4);
//   margin-bottom: calc(var(--base-spacing-unit) * 2);
//   font-family: $font-family-heading;
//   font-size: var(--fs-4);
//   line-height: 1.4;
// }

// h4,
// .display-7
// {
//   margin-top: calc(var(--base-spacing-unit) * 4);
//   margin-bottom: calc(var(--base-spacing-unit) * 2);
//   font-family: $font-family-heading;
//   font-size: var(--fs-3);
//   line-height: 1.4;
// }

// h5,
// .display-8
// {
//   margin-top: calc(var(--base-spacing-unit) * 4);
//   margin-bottom: calc(var(--base-spacing-unit) * 2);
//   font-family: $font-family-heading;
//   font-size: var(--fs-2);
//   line-height: 1.4;
// }

// h6,
// .display-9
// {
//   margin-top: calc(var(--base-spacing-unit) * 3);
//   margin-bottom: calc(var(--base-spacing-unit) * 2);
//   font-family: $font-family-heading;
//   font-size: var(--fs-1);
//   line-height: 1.4;
// }

// p
// {
//   margin-top: calc(var(--base-spacing-unit) * 2);
//   margin-bottom: calc(var(--base-spacing-unit) * 2);
//   font-family: $font-family-base;
//   font-size: var(--fs-base);
// }

// .text-size-lg
// {
//   font-size: var(--fs-1);
// }

// .text-size-sm
// {
//   font-size: var(--fs-sm);
// }

// .text-size-xs
// {
//   font-size: 0.75rem;
// }

// /* medium, large, extra-large */
// @media (min-width: 768px)
// {
//   body
//   {
//     --fs-base: 1.125rem;
//     --fs-ratio: 1.15;
//   }

//   .display-1
//   {
//     margin-top: calc(var(--base-spacing-unit) * 6);
//     margin-bottom: calc(var(--base-spacing-unit) * 3);
//   }
  
//   .display-2
//   {
//     margin-top: calc(var(--base-spacing-unit) * 6);
//     margin-bottom: calc(var(--base-spacing-unit) * 3);
//   }
  
//   .display-3
//   {
//     margin-top: calc(var(--base-spacing-unit) * 6);
//     margin-bottom: calc(var(--base-spacing-unit) * 3);
//   }
  
//   h1
//   {
//     margin-top: calc(var(--base-spacing-unit) * 6);
//     margin-bottom: calc(var(--base-spacing-unit) * 3);
//   }
  
//   h2
//   {
//     margin-top: calc(var(--base-spacing-unit) * 6);
//     margin-bottom: calc(var(--base-spacing-unit) * 3);
//   }
  
//   h3
//   {
//     margin-top: calc(var(--base-spacing-unit) * 5);
//     margin-bottom: calc(var(--base-spacing-unit) * 3);
//   }
  
//   h4
//   {
//     margin-top: calc(var(--base-spacing-unit) * 5);
//     margin-bottom: calc(var(--base-spacing-unit) * 3);
//   }
  
//   h5
//   {
//     margin-top: calc(var(--base-spacing-unit) * 5);
//     margin-bottom: calc(var(--base-spacing-unit) * 3);
//   }
  
//   h6
//   {
//     margin-top: calc(var(--base-spacing-unit) * 4);
//     margin-bottom: calc(var(--base-spacing-unit) * 3);
//   }
  
//   p
//   {
//     margin-bottom: calc(var(--base-spacing-unit) * 3);
//     margin-bottom: calc(var(--base-spacing-unit) * 3);
//   }

//   .text-size-xs
//   {
//     font-size: 0.75rem;
//   }
// }

/* 
  rounding to nearest 4

  var round = function (x, to) {
    return Math.round(x / to) * to;
  }

  $('#doRound).click(function() {
    var value = $('#num').val();
    $('#rounded).text(round(value, 4));
  });
*/



/* 

  Vertical Rhythm Mixin

    This mixin is to help create a typograhpical baseline grid but also to allow for specifying different line heights or bottom margins if you need to.

    In this mixin you can specifiy the font size in PX and it will calculate the REM based on your $doc-font-size & $doc-line-height variables. 

      @include font-size(24);

    It will also create a bottom margin based on the $doc-font-size & $doc-line-height variables unless you specify that it shouldn't have one -

      @include font-size(24, no);

    Or if you want to specify a different bottom margin to be generated -

      @include font-size(24,32);

    This mixin also generates a pixel-less line height by default unless you specify that you either don't want one where I'd suggest declaring 1 within the mixin -

      @include font-size(24, yes, 1);

    There's also the option to specify a different line-height for it to generate to, where you would specify the line-height in (effectively) it's pixel value -

      @include font-size(24, yes, 40);

*/
