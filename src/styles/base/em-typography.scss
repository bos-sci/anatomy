h1, h2, h3, h4, h5, h6,
.display-1, .display-2, .display-3, .display-4, .display-5, .display-6, .display-7
{
  font-family: $font-family-base-bold;
}

p
{
  font-family: $font-family-base;
}

// ==============================================================================
// Typesettings
// ==============================================================================
// A toolkit that sets type in Ems based on modular scale, vertical rhythm,
// and responsive ratio based headlines. Oh, and pixel borders that maintain
// rhythm.
//
// Author: Ian Rose
// Release Versions: https://github.com/ianrose/typesettings/releases
// Github: https://github.com/ianrose/typesettings
// License: The MIT License (MIT)
//
// Inspired by and used stuff from:
// https://github.com/typeplate/typeplate.github.io
// https://github.com/csswizardry/typecsset

//==============================================================================
// Config Variables
//==============================================================================
// The config variables have default values that are just looking to be adjusted.
// Use this variables to customize your Typesettings. Or take the whole thing
// apart if you want :)

// The vertical grid unit. Margin, padding, and line-height are set to multiples
// of this value. This is the value that determines the baseline for our vertical
// rhythm. The default value of 4px allows more fine tuned designs that still
// obey vertical rhythm.
$base-vertical-unit: 4px !default;

// The value that multiplies the $base-vertical-unit to get the $base-line-height.
// This gives type an ideal line-height.
$base-line-multi: 4 !default;

// Base font size in pixels.
$base-font-size: 16px !default;
$base-alpha: 16px !default;
$base-beta: 18px !default;

// Modular scale ratio that is used to figure out all the different font sizes
$ms-ratio: 1.16 !default;

// Optionally set html and body font-size and line-height for. See
// _global-init.scss
// $global-init: false !default;

// You can optionally load type styles that use Typesettings.
$load-typesetted: true !default;

//==============================================================================
// Internal Variables
//==============================================================================
// It's Best not to adjust the internal variables directly.[Note]

// Creates a handy variable for the 1em
$base-em-font-size: 1em;

// Generates modular scale values in Ems. [Note]If you need more size up and/or down
// then add more sizes.
$ms-down1: $base-em-font-size / $ms-ratio; // [1] One step down in the modular scale in EMs
$ms-down2: $ms-down1 /$ms-ratio;
$ms-down3: $ms-down2 / $ms-ratio;
$ms-down4: $ms-down3 / $ms-ratio;

$ms-up1: $base-em-font-size * $ms-ratio; // [2] One step up in the modular scale in EMs
$ms-up2: $ms-up1 * $ms-ratio;
$ms-up3: $ms-up2 * $ms-ratio;
$ms-up4: $ms-up3 * $ms-ratio;
$ms-up5: $ms-up4 * $ms-ratio;
$ms-up6: $ms-up5 * $ms-ratio;
$ms-up7: $ms-up6 * $ms-ratio;
$ms-up8: $ms-up7 * $ms-ratio;
$ms-up9: $ms-up8 * $ms-ratio;
$ms-up10: $ms-up9 * $ms-ratio;

// Warning text for when an integer is not used in rhythm functions
$not-integer-txt: ' value breaks vertical rhythm. Use an integer (whole number) for $lines.';

//==============================================================================
// Helper function(s)
//==============================================================================

// Check if value is an integer and returns true or false
@function is-int($number) {
  @return type-of($number) == number and floor(abs($number)) == abs($number);
}

// Returns a number without a unit. For example 16px becomes 16
@function stripUnits($number) {
  @return $number / ($number * 0 + 1);
}

// Returns an EM value. For example 24px becomes 1.5em
@function emCalc($target, $context: $base-font-size) {
  @return stripUnits(($target / $context)) + 0em;
}

// Returns an EM value that is a multiple of our defined base vertical unit. For
// example 3 becomes 1.125em
@function emRhythm($lines: $base-vertical-unit, $font-size: $base-em-font-size, $silent: false) {
  @if is-int($lines) == false and $silent == false {
    @warn  #{$lines} + $not-integer-txt;
  }
  @return (stripUnits($lines) * stripUnits($base-vertical-unit)) / (stripUnits($font-size) * stripUnits($base-font-size)) + 0em;
}

// Returns a unitless number that is a multiple of our defined base vertical unit.
// For example 3 becomes 1.125
@function unitlessRhythm($lines: $base-line-multi, $font-size: $base-em-font-size, $silent: false) {
  @if is-int($lines) == false and $silent == false {
    @warn #{$lines} + $not-integer-txt;
  }
  @return ($lines * stripUnits($base-vertical-unit)) / (stripUnits($font-size) * stripUnits($base-font-size));
}

//==============================================================================
// Mixin(s)
//==============================================================================
// Finally, the tools that you can use throughout your project to set
// all the wonderful type related stuffs.

// Sets the type in EMs and makes a vertical rhythm unitless line-height that is
// based on context.
@mixin setType($lines: $base-line-multi, $font-size: $base-em-font-size, $silent: false) {
  font-size: $font-size;
  line-height: unitlessRhythm($lines, $font-size, $silent);
}

// Creates a vertical rhythm unitless line-height that is based on context
@mixin setLeading($lines: $base-line-multi, $font-size: $base-em-font-size, $silent: false) {
  line-height: unitlessRhythm($lines, $font-size, $silent);
}

// Creates base type baseline overlay and vertical unit overlay.
// To use on the body tag for example: body { @include debug-vertical-alignment(); } and add class va-debug to the body tag
@mixin debug-vertical-alignment($position: 'absolute', $opacity: 0.8, $vertical-unit: $base-vertical-unit, $type-base-line-multi: $base-line-multi, $type-size: $base-em-font-size) {
  position: relative;

  &::before,
  &::after {
    content: "";
    position: #{$position};
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
    width: 100%;
    display: none;
  }

  &::before {
    z-index: 10;
    background-image: -webkit-linear-gradient(rgba(233, 0, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
    background-image: linear-gradient(rgba(233, 0, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
    background-size: 100% (unitlessRhythm($type-base-line-multi, $type-size) + 0rem);
  }

  &::after {
    z-index: 9;
    background-image: -webkit-linear-gradient(rgba(0, 233, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
    background-image: linear-gradient(rgba(0, 233, 0, $opacity) 1px, rgba(0, 0, 0, 0) 1px);
    background-size: 100% $vertical-unit;
  }

  &.va-debug::before,
  &.va-debug::after {
    display: block;
    pointer-events: none;
  }
}

html {
  font-size: 1rem;
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;

  // @media (min-width: 768px)
  // {
  //   font-size: ($base-font-size / 16px) * 112.5%;
  // }
}

body {
  @include debug-vertical-alignment();

  font-size: ($base-alpha / 16px) * 100%;
  @include setLeading();

  @media (min-width: 992px)
  {
    font-size: ($base-beta / 16px) * 100%;
  }
}


//==============================================================================
// Default Type Styles
//==============================================================================

// Stops devices from scaling up text.
// @include typesettingsInit();

// [1] Applies a margin bottom that is a multiple of the vertical grid in EMs.
// The first argument is the font size context and the second is multiple of the
// vertical grid unit.
// [2] Sets the type to one of the modular scale values and the second argument
// sets a unitless line-height as a multiple of the vertical gridx.
// [3] A generic media query for tablet size ranges.
// [4] Applies a margin bottom that is the same vertical grid value as the mobile
// first rule.
// [5] Sets the type to one of the modular scale values and the second argument
// sets a unitless line-height as a multiple of the vertical grid.

h1, .h1
{
  // margin-bottom: emRhythm(1, $ms-up2); // [1]
  @include setType(13, $ms-up5); // [2]

  @media (min-width: 768px)
  {
    // margin-bottom: emRhythm(1, $ms-up4);
    @include setType(13, $ms-up5);
  }
}

h2, .h2
{
  // margin-bottom: emRhythm(1, $ms-up1);
  @include setType(5, $ms-up4);

  @media (min-width: 768px)
  {
    @include setType(8, $ms-up4);
  }
}

h3, .h3
{
  @include setType(5, $ms-up1);

  @media (min-width: 768px)
  {
    @include setType(6, $ms-up2);
  }
}

h4, .h4
{
  @include setType(5, $ms-up1);
}

h5, .h5,
h6, .h6
{
  @include setType(4);
}