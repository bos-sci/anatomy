{"componentChunkName":"component---src-templates-code-standard-doc-js","path":"/code-standards/devops","result":{"data":{"contentfulCodeStandard":{"id":"1426f837-fc5d-59f3-b549-dfb2e1022fca","name":"DevOps","content":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Agile Workflow\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Break down work into the smallest incremental change possible\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Limit work in progress to 2-3 items per person\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pull the latest code every day and before starting new development\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Continually test changes throughout the development cycle\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create frequent, small pull requests that touch as few files as possible\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Submit pull requests for code review\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Address code review feedback\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Perform peer code reviews on the latest pull requests\")), mdx(\"h2\", null, \"Development Practices\"), mdx(\"p\", null, \"Anyone should be able to understand the full history of a repository by quickly scanning the list of pull requests and commits within it.\"), mdx(\"p\", null, \"Follow the practices below to increase quality, efficiency, and transparency.\"), mdx(\"h3\", null, \"Branches\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Pull the latest code before creating a new branch\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Name branches concisely and descriptively\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Prefix branch names with \\\"feature\\\" or \\\"bug\\\"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I.e., feature/feature-name or bug/bug-name\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"E.g.: bug/readme-typos\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid sharing branches\")), mdx(\"h3\", null, \"Testing\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Continually test changes throughout the web development cycle\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Testing is not a single step that happens after 'dev complete'\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Testing should happen through the entire web development cycle, e.g.: usability testing, dev testing, accessibility testing, cross-browser testing, unit and end-to-end testing, QA testing, performance testing, automated testing, manual testing, etc.\")))), mdx(\"h3\", null, \"Commits\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Before committing, run \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"./automated-code-quality-tools\"\n  }, \"linters\"), \" to enforce best practices and coding standards, reduce the amount of human code review needed, and allow code reviewers to focus on providing higher-level feedback\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Commit early and often\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A commit should include a complete, isolated change\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Follow the single responsibility principle whenever possible\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Think about what other work would be lost if we had to roll back\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Write concise and descriptive commit messages\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Limit the length to ~50-75 characters\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use the imperative mood\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The imperative mood forms a command or request\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This is an established convention for system-generated commits in Git, e.g.: \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Merge branch 'bug/readme-typos'\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A properly formed commit message should complete the following sentence: \\\"If applied, this commit will \", \"[commit message]\", \"\\\"\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example, \\\"If applied, this commit will fix typos in the README\\\" translates to \\\"Fix typos in the README\\\"\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A series of commits should act as a step-by-step summary of the code changes within a pull request\")))), mdx(\"h3\", null, \"Pull requests\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Before creating a pull request, review your own code\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Resolve conflicts \\u2014 do not rely on auto-merge features\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Carefully compare diffs line by line against the latest version\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ensure any unintended changes are not included\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clean up any typos, trailing white space, commented out code, debuggers, and TODOs\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create frequent pull requests\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A pull request should only contain changes corresponding to a single ticket\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Keep pull requests small and focused\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Modify as few files as possible\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Think about what other work would be lost if we had to roll back\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Name pull requests concisely and descriptively\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Whenever possible, include a JIRA ticket number and enforce this practice through tooling\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid generic names like \\\"bug fix\\\"\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Temporarily prefix pull requests that are not ready to be reviewed or merged\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use \\\"\", \"[WIP]\", \"\\\" to indicate that a pull request is not ready for code review\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use \\\"\", \"[DO NOT MERGE]\", \"\\\" to indicate that a pull request is not ready to be merged\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remove prefixes once a pull request is ready to be reviewed or merged to indicate that the pull request is ready\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use descriptive names to help keep pull requests small and focused\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use the pull request description to provide additional context to the changes\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"At a minimum, describe what changes are being introduced and why\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Consider including before and after screenshots of visual changes in the pull request description\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the work is tracked in Trello, include a link to the card in the pull request description\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not use the pull request description as a substitute for self-explanatory or \\\"self-commenting\\\" code supplemented by code comments\")))), mdx(\"h3\", null, \"Code Review\"), mdx(\"p\", null, \"When reviewing code:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not begin the code review process on a pull request that has merge conflicts, fails to compile or pass automated checks, or has a \\\"\", \"[WIP]\", \"\\\" prefix in its name\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Begin the review process as soon as possible\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Ask another reviewer to provide additional feedback, especially if you are unfamiliar with the code or concepts \\u2014 two reviewers are better than one\")), mdx(\"p\", null, \"When providing feedback:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Explain what should be changed and why it should be changed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Focus on function first, cleanliness and maintainability second, and optimization last \\u2014 all three matter, but so does the order in which they're resolved\")), mdx(\"p\", null, \"When remediating feedback:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Remediate code review feedback within the same pull request to avoid splitting the history\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If remediating something identified during code review would cause the pull request to become too large, create a follow-up JIRA ticket or Trello card and reply to the code review comment with a link to the ticket or card\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not introduce new, unrelated changes after the code review process has started\")), mdx(\"h3\", null, \"Documentation\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Write, or update, documentation about all new changes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Document all code review conversations in comment threads \\u2014 avoid having one-off conversations to prevent the loss of context or information\")), mdx(\"h3\", null, \"Merging\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not merge a pull request unless the code it contains is production-ready\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Do not merge a pull request that has not been approved, fails to compile or pass automated checks, or has a \\\"\", \"[DO NOT MERGE]\", \"\\\" prefix in its name\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Delete the feature branch after merging the pull request\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"updatedAt":"2021-09-17T03:17:41.412Z"}},"pageContext":{"id":"1426f837-fc5d-59f3-b549-dfb2e1022fca","slug":"/code-standards/devops"}},"staticQueryHashes":["2841359383"]}