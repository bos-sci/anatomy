{"componentChunkName":"component---src-templates-code-standard-doc-js","path":"/code-standards/general","result":{"data":{"contentfulCodeStandard":{"id":"79505200-ec87-535e-ac52-478071fc042c","name":"General","content":{"childMdx":{"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Front-End Code Standards\"), mdx(\"p\", null, \"This site contains the guidelines and best practices for front-end web development at Boston Scientific.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Front-end code should be valid and compliant with \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.w3.org/standards/\"\n  }, \"W3C\"), \" and \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.w3.org/WAI/standards-guidelines/wcag/\"\n  }, \"WCAG\"), \" standards, as well as the standards outlined in this site\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No deprecated or non-standard code\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"No console errors\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All front-end code should be tested across supported browsers and operating systems, and with assistive technology, e.g.: screen readers\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Front-end code should maintain a separation of concerns\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Semantic HyperText Markup Language (HTML) for structure\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Cascading Style Sheets (CSS) for presentation\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"JavaScript (JS) for behavior and interaction\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Front-end code should be as simple, as clear, and as clean as possible\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Clever code does not mean good code; readability is critical\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All code in any codebase should look like a single person typed it, even when many people are contributing to it. Conventions for white space, indentation, nesting, capitalization, quote styles, etc. should be established at the start of a project or during major cleanup/refactoring efforts, and enforced by automation, e.g.: code editor settings, linters, etc. Please refer to the various sections of these standards for more information about language-specific formatting\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Maintain an organized and logical structure in the file system\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Leave the code a little better than you found it\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Address tech debt\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Delete legacy files and dead code\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Delete commented out code\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid code comments. Code never lies; comments do. Writing self-explanatory code is a better use of time\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use automated code quality tools, e.g.: linters, browser extensions, etc., to provide real-time feedback, automate code quality control, reduce the amount of human code review needed, and enforce best practices and coding standards\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Configure editor\\u2019s formatting settings to align with front-end code standards and linter rules in order to avoid common code inconsistencies and dirty diffs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Configure editor to \\u201Cshow invisibles\\u201D in order to make white space changes more visible\")))), mdx(\"h2\", null, \"Responsive\"), mdx(\"p\", null, \"Responsive means the layout is flexible, fluid, and device agnostic, and the content reflows and adapts to almost any screen.\"), mdx(\"p\", null, \"Since screen dimensions and width in CSS pixels vary widely between devices, and how people interact with the web across screens continues to evolve rapidly, content should not rely on a particular device type, screen size, viewport width, resolution, orientation, etc. to render well. Instead of thinking about specific devices and dimensions, think about sizes conceptually, e.g.: extra-small, small, medium, large, extra-large, and focus on creating flexible, fluid, device-agnostic layouts that adapt to almost any screen.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use a responsive layout grid and media queries\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Take a device-agnostic approach to responsive\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Start with the smallest breakpoint and work upwards\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Never hide content\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Avoid setting fixed dimensions\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Test on real hardware\")), mdx(\"h2\", null, \"Third-Party Libraries\"), mdx(\"p\", null, \"The selection of third-party libraries should be carefully considered and verified with the project team as the appropriate solution to a given problem. \\\"Adding another plug-in\\\" is not always the best solution.\"), mdx(\"p\", null, \"In general, third-party libraries should be actively-maintained, open source, lightweight, accessible libraries with no dependencies. The feature set should be understood and appropriate. Whenever possible, the same third-party library should be used across applications to keep the UX consistent and speed up development. For apps using modern JavaScript frameworks, third-party libraries should be built using TypeScript.\"), mdx(\"p\", null, \"Adding multiple front-end frameworks, e.g.: Bootstrap and Material UI, in the same application is not recommended. Having multiple frameworks that solve the same problem exponentially increases the size of the application and introduces inconsistent interactions, animations, styles, etc. that are difficult to reconcile and maintain.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"updatedAt":"2021-09-17T03:03:54.739Z"}},"pageContext":{"id":"79505200-ec87-535e-ac52-478071fc042c","slug":"/code-standards/general"}},"staticQueryHashes":["2841359383"]}